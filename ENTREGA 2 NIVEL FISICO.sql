GRANT EXECUTE ON DBMS_RLS TO PLYTIX;
GRANT DBA TO PLYTIX;

-- CREAMOS LOS ROLES

CREATE ROLE ROL_ADMIN_SISTEMA;
CREATE ROLE ROL_USUARIO;
CREATE ROLE ROL_GESTOR_CUENTAS;
CREATE ROLE ROL_PLANIFICADOR_SERVICIOS;

-- * PERMISOS VPD

-- CREAMOS TABLA OPCIONAL COMENTARIO PARA INSERTAR AHÍ EL VPD CON SU POLÍTICA DE SEGURIDAD

CREATE TABLE COMENTARIO (
    id_comentario   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contenido       VARCHAR2(1000),
    usuario_id      NUMBER,
    fecha_creacion  DATE DEFAULT SYSDATE
) TABLESPACE TS_PLYTIX;

CREATE OR REPLACE FUNCTION vpd_filtro_comentario (
    schema_name IN VARCHAR2,
    table_name  IN VARCHAR2
) RETURN VARCHAR2 IS
BEGIN
    RETURN 'usuario_id = SYS_CONTEXT(''app_ctx'', ''usuario_id'')';
END;
/

BEGIN
    DBMS_RLS.ADD_POLICY(
        object_schema     => 'PLYTIX',  -- o el esquema correspondiente
        object_name       => 'COMENTARIO',
        policy_name       => 'POLITICA_VPD_COMENTARIO',
        function_schema   => 'PLYTIX',
        policy_function   => 'VPD_FILTRO_COMENTARIO',
        statement_types   => 'SELECT, INSERT, UPDATE, DELETE',
        update_check      => TRUE
    );
END;
/


-- OTORGAMOS PERMISOS COMPLETOS SOBRE LAS TABLAS AL ROL_ADMIN_SISTEMA
GRANT ALL ON Activo TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Atributo TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Atributos_Producto TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Categoria TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Categoria_Activos TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Cuenta TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Plan TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Producto TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Rel_Activ_CategAct TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Rel_Prod_Activ TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Rel_Prod_Categ TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Relacionado TO ROL_ADMIN_SISTEMA;
GRANT ALL ON Usuario TO ROL_ADMIN_SISTEMA;

-- OTORGAMOS PERMISOS PARA CREAR, MODIFICAR Y ELIMINAR CUENTAS, USUARIOS, PRODUCTOS, ACTIVOS Y PLANES
GRANT SELECT, INSERT, UPDATE, DELETE ON CUENTA   TO ROL_ADMIN_SISTEMA;
GRANT SELECT, INSERT, UPDATE, DELETE ON USUARIO  TO ROL_ADMIN_SISTEMA;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCTO TO ROL_ADMIN_SISTEMA;
GRANT SELECT, INSERT, UPDATE, DELETE ON ACTIVO   TO ROL_ADMIN_SISTEMA;
GRANT SELECT, INSERT, UPDATE, DELETE ON PLAN     TO ROL_ADMIN_SISTEMA;

-- * PERMISOS USUARIO

-- VAMOS A CREAR UN USUARIO FICTICIO PARA HACER PRUEBAS
CREATE USER CLIENTE_PLYTIX IDENTIFIED BY bd;
GRANT ROL_USUARIO TO CLIENTE_PLYTIX;
GRANT CONNECT, RESOURCE TO CLIENTE_PLYTIX;

 ALTER USER CLIENTE_PLYTIX PROFILE USERPLYTIX_PROFILE;

-- VER Y MODIFICAR SU PROPIA INFORMACION DE USUARIO
CREATE OR REPLACE VIEW V_USUARIO_ESTANDAR AS
SELECT *
FROM USUARIO
WHERE NOMBREUSUARIO = USER;

GRANT SELECT, UPDATE ON V_USUARIO_ESTANDAR TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.USUARIO_ESTANDAR FOR V_USUARIO_ESTANDAR;

-- ACCEDER A PRODUCTOS, ACTIVOS Y ATRIBUTOS DE SU PROPIA CUENTA Y DAR DE ALTA PRODUCTOS, ACTIVOS Y ATRIBUTOS
CREATE OR REPLACE VIEW V_USUARIO_PRODUCTO AS
SELECT * FROM PRODUCTO WHERE CUENTA_ID = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER)
WITH CHECK OPTION;

GRANT SELECT, INSERT, UPDATE, DELETE ON V_USUARIO_PRODUCTO TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.PRODUCTO FOR V_USUARIO_PRODUCTO;


CREATE OR REPLACE VIEW V_USUARIO_ACTIVO AS
SELECT * FROM ACTIVO WHERE CUENTA_ID = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER)
WITH CHECK OPTION;

GRANT SELECT, INSERT, UPDATE, DELETE ON V_USUARIO_ACTIVO TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.ACTIVO FOR V_USUARIO_ACTIVO;

CREATE OR REPLACE VIEW V_USUARIO_ATRIBUTO AS
SELECT * FROM ATRIBUTO WHERE CUENTA_ID = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER)
WITH CHECK OPTION;

GRANT SELECT, INSERT, UPDATE, DELETE ON V_USUARIO_ATRIBUTO TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.ATRIBUTO FOR V_USUARIO_ATRIBUTO;

-- ACCEDER A SU PLAN ASOCIADO

CREATE OR REPLACE VIEW V_USUARIO_PLAN AS
SELECT * FROM PLAN WHERE ID = (SELECT PLAN_ID FROM CUENTA WHERE ID = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER))
WITH CHECK OPTION;
GRANT SELECT ON V_USUARIO_PLAN TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.PLAN FOR V_USUARIO_PLAN;

-- * PERMISOS GESTOR_CUENTAS

-- ACCEDE Y ADMINISTRA LA TABLA CUENTA, NO TIENE ACCESO A DATOS SENSIBLES DE USUARIOS
CREATE OR REPLACE VIEW V_GESTOR_CUENTAS AS
SELECT ID, NOMBRE, DIRECCIONFISCAL, NIF, FECHAALTA, PLAN_ID, USUARIO_CUENTA_ID, USUARIO_ID FROM CUENTA;

GRANT SELECT, INSERT, UPDATE, DELETE ON V_GESTOR_CUENTAS TO ROL_GESTOR_CUENTAS;

-- * PERMISOS PLANIFICADOR_SERVICIOS

-- ADMINISTRA LA TABLA PLAN Y SUS RELACIONES (PRODUCTOS, ACTIVOS, CATEGORIASPRODUCTOS Y CATEGORIASACTIVOS)
GRANT SELECT, INSERT, UPDATE, DELETE ON PLAN TO ROL_PLANIFICADOR_SERVICIOS;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCTO TO ROL_PLANIFICADOR_SERVICIOS;
GRANT SELECT, INSERT, UPDATE, DELETE ON ACTIVO TO ROL_PLANIFICADOR_SERVICIOS;
GRANT SELECT, INSERT, UPDATE, DELETE ON Rel_Prod_Categ TO ROL_PLANIFICADOR_SERVICIOS;
GRANT SELECT, INSERT, UPDATE, DELETE ON CATEGORIA_ACTIVOS TO ROL_PLANIFICADOR_SERVICIOS;


-- RF1. Gestión de los Productos, Categorías y Activos

-- 1.1. Otorgar los permisos al Usuario Estándar para hacer CRUD (Create, read, Update, Delete) de la tabla Producto
-- YA LO HEMOS HECHO ANTES

-- 1.2. Cambio de público a privado o viceversa de los productos

ALTER TABLE PRODUCTO
ADD PUBLICO CHAR(1) DEFAULT 'S' CHECK (PUBLICO IN ('S', 'N'));

-- 1.3. Crear una vista V_PRODUCTO_PUBLICO para productos públicos
CREATE OR REPLACE VIEW V_PRODUCTO_PUBLICO AS
SELECT * FROM PRODUCTO WHERE PUBLICO = 'S'
WITH CHECK OPTION;

GRANT SELECT ON V_PRODUCTO_PUBLICO TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.PRODUCTO_PUBLICO FOR V_PRODUCTO_PUBLICO;

-- 1.4. Otorgar los permisos al Usuario estándar para hacer CRUD (Create, read, Update, Delete) de la tabla Activo y la relación de Activos y Categorías de activos. 

CREATE OR REPLACE VIEW V_ACTIVO_REL_ACTIVO_CATEGORIA AS
SELECT *
FROM Rel_Activ_CategAct WHERE Activo_Cuenta_Id = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER)
WITH CHECK OPTION;

GRANT SELECT, INSERT, UPDATE, DELETE ON V_ACTIVO_REL_ACTIVO_CATEGORIA TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.REL_ACTIVO_CATEGORIA FOR V_ACTIVO_REL_ACTIVO_CATEGORIA;

-- NO SE SI HABRIA QUE MODIFICAR EL TRIGGER DE PRODUCTOS

-- 1.5. Otorgar los permisos al Usuario estándar para hacer CRUD (Create, read, Update, Delete) de la tabla Categoría y la relación productos y Categorías

CREATE OR REPLACE VIEW V_CATEGORIA AS
SELECT * FROM CATEGORIA WHERE CUENTA_ID = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER)
WITH CHECK OPTION;

GRANT SELECT, INSERT, UPDATE, DELETE ON V_CATEGORIA TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.CATEGORIA FOR V_CATEGORIA;

CREATE OR REPLACE VIEW V_REL_PRODUCTO_CATEGORIA AS
SELECT * FROM Rel_Prod_Categ WHERE Producto_Cuenta_Id = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER)
WITH CHECK OPTION;

GRANT SELECT, INSERT, UPDATE, DELETE ON V_REL_PRODUCTO_CATEGORIA TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.REL_PRODUCTO_CATEGORIA FOR V_REL_PRODUCTO_CATEGORIA;

-- 1.6. Otorgar los permisos al Usuario estándar para hacer CRUD (Create, read, Update, Delete) de la tabla Relacionado.

CREATE OR REPLACE VIEW V_RELACIONADO AS
SELECT * FROM RELACIONADO WHERE Producto_Cuenta_Id = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER)
WITH CHECK OPTION;

GRANT SELECT, INSERT, UPDATE, DELETE ON V_RELACIONADO TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.RELACIONADO FOR V_RELACIONADO;

-- 1.7. Otorgar los permisos al Usuario estándar para hacer CRUD (Create, read, Update, Delete) de la tabla Atributo y la relación de Atributos y Productos.

CREATE OR REPLACE VIEW V_ATRIBUTO_PRODUCTO AS
SELECT * FROM ATRIBUTOS_PRODUCTO WHERE PRODUCTO_CUENTA_ID = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER)
WITH CHECK OPTION;

GRANT SELECT, INSERT, UPDATE, DELETE ON V_ATRIBUTO_PRODUCTO TO ROL_USUARIO;
CREATE OR REPLACE SYNONYM CLIENTE_PLYTIX.ATRIBUTO_PRODUCTO FOR V_ATRIBUTO_PRODUCTO;

-- 2. RF3. Gestión de las cuentas.

-- 2.1. Otorgar los permisos al Gestor de cuentas para hacer CRUD (Create, read, Update, Delete) de la tabla Cuenta

-- YA LO HEMOS HECHO ANTES

-- 2.2. Otorgarle los permisos para acceder a los atributos de usuario necesarios.

CREATE OR REPLACE VIEW V_USUARIO_GESTOR_CUENTAS AS
SELECT ID, NOMBREUSUARIO, NombreCompleto, Avatar FROM USUARIO
WHERE ID IN (SELECT USUARIO_ID FROM CUENTA WHERE USUARIO_CUENTA_ID = (SELECT CUENTA_ID FROM USUARIO WHERE NOMBREUSUARIO = USER))
WITH CHECK OPTION;

GRANT SELECT ON V_USUARIO_GESTOR_CUENTAS TO ROL_GESTOR_CUENTAS;

-- 3. RF4. Gestión de los planes.

-- 3.1. Otorgar los permisos al Planificador de servicios para hacer CRUD (Create, read, Update, Delete) de la tabla Plan
-- YA LO HEMOS HECHO ANTES


-- CREAMOS UNA POLITICA DE SEGURIDAD QUE USA UN CONTEXTO PARA QUE EL USUARIO SOLO PUEDA VER LOS DATOS DE SU PROPIA CUENTA


CREATE TABLE PRODUCTOS_USUARIO AS
SELECT
    U.NombreUsuario,
    P.GTIN,
    P.SKU,
    P.Nombre AS NombreProducto
FROM
    Usuario U
JOIN
    Producto P ON U.Cuenta_Id = P.Cuenta_Id;


CREATE OR REPLACE FUNCTION fn_politica_producto_usuario (
    p_schema VARCHAR2,
    p_object VARCHAR2
) RETURN VARCHAR2
IS
    v_usuario VARCHAR2(100);
BEGIN
    -- Obtiene el nombre del usuario conectado (session user)
    v_usuario := SYS_CONTEXT('userenv', 'SESSION_USER');
    
    -- Devuelve la condición SQL para filtrar filas
    RETURN 'UPPER(NOMBREUSUARIO) = ''' || UPPER(v_usuario) || '''';
END;
/

-- 

BEGIN
    DBMS_RLS.ADD_POLICY(
        object_schema   => 'PLYTIX',         -- Pon aquí el esquema de la tabla, ej: 'PLYTIX'
        object_name     => 'PRODUCTOS_USUARIO',  -- Nombre de la tabla
        policy_name     => 'POL_SEGURIDAD_USUARIO',  -- Nombre que quieras poner a la política
        function_schema => 'PLYTIX',         -- Esquema donde está la función (normalmente igual al anterior)
        policy_function => 'FN_POLITICA_PRODUCTO_USUARIO', -- La función que definiste arriba
        statement_types => 'SELECT',              -- Para qué tipo de sentencia aplica (SELECT, INSERT, UPDATE...)
        update_check    => FALSE                   -- No hacer chequeo extra en updates
    );
END;
/

-- CREAMOS AUDITORIA PARA LA TABLA PLAN

CREATE AUDIT POLICY auditoria_tabla_plan
  ACTIONS SELECT, INSERT, UPDATE, DELETE ON PLAN;

AUDIT POLICY auditoria_tabla_plan;

CREATE AUDIT POLICY auditoria_tabla_cuenta
  ACTIONS SELECT, INSERT, UPDATE, DELETE ON CUENTA;

AUDIT POLICY auditoria_tabla_cuenta;

SELECT 
  COUNT(*)
FROM 
  UNIFIED_AUDIT_TRAIL
WHERE 
  OBJECT_NAME = 'PLAN'
ORDER BY EVENT_TIMESTAMP DESC;

SELECT VALUE FROM V$OPTION WHERE PARAMETER = 'Unified Auditing';


